// Generated by CoffeeScript 1.3.3
(function() {
  var CompositeFrame, Frame, Project, evaluateFrames, exportName, _window;

  Frame = (function() {

    function Frame(properties) {
      this.rules = [];
      _.extend(this, properties);
    }

    Frame.prototype.addRule = function(requiredSlots, callback) {
      if (typeof callback === 'function') {
        this.rules.push({
          slots: requiredSlots,
          procedure: callback
        });
        return this;
      }
    };

    Frame.prototype.evaluate = function(instance) {
      var isDefinedSlot;
      isDefinedSlot = function(slot) {
        var _ref;
        return (_ref = typeof (instance != null ? instance[slot] : void 0)) !== 'undefined' && _ref !== 'function';
      };
      return _.all(this.rules, function(rule) {
        return _.all(rule.slots, isDefinedSlot) && rule.procedure(instance || {});
      });
    };

    return Frame;

  })();

  CompositeFrame = (function() {

    function CompositeFrame(properties) {
      _.extend(this, properties);
    }

    CompositeFrame.prototype.evaluate = function(matchedFrames) {
      return _.all(this.requiredFrames, function(frame) {
        return _.contains(_.pluck(matchedFrames, 'name'), frame);
      });
    };

    return CompositeFrame;

  })();

  Project = (function() {

    function Project(properties) {
      _.extend(this, properties);
    }

    Project.prototype.budgetExceeded = function() {
      return this.executedBudget > this.totalBudget;
    };

    Project.prototype.overdue = function() {
      return this.elapsedTime > this.estimatedTime;
    };

    return Project;

  })();

  evaluateFrames = function(simpleFrames, compositeFrames, instance) {
    var compositeMatched, frame, simpleMatched;
    simpleMatched = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = simpleFrames.length; _i < _len; _i++) {
        frame = simpleFrames[_i];
        if (frame.evaluate(instance)) {
          _results.push(frame);
        }
      }
      return _results;
    })();
    compositeMatched = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = compositeFrames.length; _i < _len; _i++) {
        frame = compositeFrames[_i];
        if (frame.evaluate(simpleMatched)) {
          _results.push(frame);
        }
      }
      return _results;
    })();
    return {
      simpleFrames: simpleMatched,
      compositeFrames: compositeMatched
    };
  };

  _window = this;

  exportName = function(name, value) {
    if (!(_.isString(name) && !_.isEmpty(name))) {
      return;
    }
    if (typeof module !== "undefined" && module !== null) {
      module.exports[name] = value;
    }
    return _window[name] = value;
  };

  exportName('Project', Project);

  exportName('Frame', Frame);

  exportName('CompositeFrame', CompositeFrame);

  exportName('evaluateFrames', evaluateFrames);

}).call(this);
