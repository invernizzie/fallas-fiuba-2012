// Generated by CoffeeScript 1.3.3
(function() {
  var Frame, Project, createSingleRuleFrame, frames, project, use, _, _window;

  if (typeof _ === "undefined" || _ === null) {
    _ = require('underscore');
  }

  Frame = (function() {

    function Frame(properties) {
      this.rules = [];
      _.extend(this, properties);
    }

    Frame.prototype.addRule = function(requiredSlots, callback) {
      if (typeof callback === 'function') {
        this.rules.push({
          slots: requiredSlots,
          procedure: callback
        });
        return this;
      }
    };

    Frame.prototype.evaluate = function(instance) {
      var isDefinedSlot;
      isDefinedSlot = function(slot) {
        var _ref;
        return (_ref = typeof (instance != null ? instance[slot] : void 0)) !== 'undefined' && _ref !== 'function';
      };
      return _.all(this.rules, function(rule) {
        return _.all(rule.slots, isDefinedSlot) && rule.procedure(instance || {});
      });
    };

    return Frame;

  })();

  Project = (function() {

    function Project(properties) {
      _.extend(this, properties);
    }

    Project.prototype.budgetExceeded = function() {
      return this.executedBudget > this.totalBudget;
    };

    Project.prototype.overdue = function() {
      return this.elapsedTime > this.estimatedTime;
    };

    return Project;

  })();

  module.exports.Project = Project;

  module.exports.Frame = Frame;

  _window = this;

  _window.Project = Project;

  _window.Frame = Frame;

  frames = [];

  createSingleRuleFrame = function(name, requiredSlots, ruleProcedure) {
    return frames.push((new Frame({
      name: name
    })).addRule(requiredSlots, ruleProcedure));
  };

  createSingleRuleFrame('Presupuesto superado', ['totalBudget', 'executedBudget'], function(proj) {
    return proj.budgetExceeded();
  });

  createSingleRuleFrame('Costos subestimados', ['totalBudget', 'executedBudget', 'commitedFunctionality', 'deliveredFunctionality'], function(proj) {
    var deliveryRatio, spendingRatio;
    spendingRatio = proj.executedBudget / proj.totalBudget;
    deliveryRatio = proj.deliveredFunctionality / proj.commitedFunctionality;
    return spendingRatio > deliveryRatio;
  });

  createSingleRuleFrame('Calendario atrasado', ['elapsedTime', 'estimatedTime', 'commitedFunctionality', 'deliveredFunctionality'], function(proj) {
    var calendarRatio, deliveryRatio;
    calendarRatio = proj.elapsedTime / proj.estimatedTime;
    deliveryRatio = proj.deliveredFunctionality / proj.commitedFunctionality;
    return calendarRatio > deliveryRatio;
  });

  createSingleRuleFrame('Esfuerzo subestimado', ['investedEffort', 'estimatedEffort', 'commitedFunctionality', 'deliveredFunctionality'], function(proj) {
    var deliveryRatio, effortRatio;
    effortRatio = proj.investedEffort / proj.estimatedEffort;
    deliveryRatio = proj.deliveredFunctionality / proj.commitedFunctionality;
    return effortRatio > deliveryRatio;
  });

  createSingleRuleFrame('Gestion de cambios deficiente', ['commitedFunctionality', 'deliveredFunctionality'], function(proj) {
    return proj.deliveredFunctionality > 1.1 * proj.commitedFunctionality;
  });

  createSingleRuleFrame('Calendario excedente', ['elapsedTime', 'estimatedTime', 'commitedFunctionality', 'deliveredFunctionality'], function(proj) {
    var allDelivered, early;
    allDelivered = proj.deliveredFunctionality >= proj.commitedFunctionality;
    early = proj.estimatedTime > 1.1 * proj.elapsedTime;
    return allDelivered && early;
  });

  createSingleRuleFrame('Esfuerzo sobreestimado', ['investedEffort', 'estimatedEffort', 'commitedFunctionality', 'deliveredFunctionality'], function(proj) {
    var allDelivered, overestimated;
    allDelivered = proj.deliveredFunctionality >= proj.commitedFunctionality;
    overestimated = proj.estimatedEffort > 1.1 * proj.investedEffort;
    return allDelivered && overestimated;
  });

  project = new Project({
    executedBudget: 11,
    totalBudget: 10,
    deliveredFunctionality: 6,
    commitedFunctionality: 5,
    elapsedTime: 5,
    estimatedTime: 20,
    investedEffort: 3,
    estimatedEffort: 10
  });

  use = function() {
    var frame, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = frames.length; _i < _len; _i++) {
      frame = frames[_i];
      if (frame.evaluate(project)) {
        _results.push(console.log("El marco '" + frame.name + "' coincide"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
